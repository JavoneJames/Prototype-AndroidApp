package com.ce301.billcoverprototype;import android.app.ProgressDialog;import android.os.Bundle;import android.util.Log;import android.view.Gravity;import android.view.LayoutInflater;import android.view.MotionEvent;import android.view.View;import android.webkit.WebView;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.PopupWindow;import androidx.annotation.NonNull;import androidx.appcompat.app.AppCompatActivity;import androidx.appcompat.widget.Toolbar;import com.ce301.billcoverprototype.model.Example;import com.google.android.gms.tasks.OnFailureListener;import com.google.android.gms.tasks.OnSuccessListener;import com.google.firebase.database.FirebaseDatabase;import com.stripe.android.ApiResultCallback;import com.stripe.android.PaymentConfiguration;import com.stripe.android.Stripe;import com.stripe.android.model.Card;import com.stripe.android.model.Token;import com.stripe.android.view.CardMultilineWidget;import java.util.concurrent.TimeUnit;import okhttp3.OkHttpClient;import retrofit2.Call;import retrofit2.Callback;import retrofit2.Retrofit;import retrofit2.converter.gson.GsonConverterFactory;public class PaymentDetails extends AppCompatActivity {    Toolbar toolbar;    Button btnConfirm, payCancel;    String userId;    EditText etPayment;    ProgressDialog progressDialog;    String etCardNo, etCardMonth, etCardYear, etCardCSV;    String remain;    //    String refundedUri=/v1/charges/ch_1GVYIPKSNprdwA2jklAokXe3/refunds;    String id = "sfdsdgdtdxgfxg";    private String paymentIntentClientSecret;    private Stripe stripe;    private CardMultilineWidget cardInputWidget;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_card);        inIT();        if (getIntent().getStringExtra("status").equals("group")) {            remain = String.valueOf(getIntent().getIntExtra("remain", 0));        }        btnConfirm.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                /*-------------------------PAYMENT USE STRIP GETWAY-------------------------*/                cardInputWidget = findViewById(R.id.cardInputWidget);                Card card = cardInputWidget.getCard();                etCardNo = card.getNumber();                etCardCSV = card.getCvc();                String zipCode = card.getAddressZip();                etCardMonth = String.valueOf(card.getExpMonth());                etCardYear = String.valueOf(card.getExpYear());                if (card != null) {                    progressDialog.show();                    // Create a Stripe token from the card details                    stripe = new Stripe(getApplicationContext(), PaymentConfiguration.getInstance(getApplicationContext()).getPublishableKey());                    stripe.createToken(card, new ApiResultCallback<Token>() {                        @Override                        public void onSuccess(@NonNull Token result) {                            String tokenID = result.getId();                            Log.d("token", tokenID + "");                            requestSections(tokenID);                            // Send the token identifier to the server...                        }                        @Override                        public void onError(@NonNull Exception e) {                            // Handle error                        }                    });                }//            }        });        payCancel.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {//                refundPayment();            }        });    }    void inIT() {        btnConfirm = findViewById(R.id.button5);        etPayment = findViewById(R.id.etPrice);        payCancel = findViewById(R.id.payCancel);        progressDialog = new ProgressDialog(this);        progressDialog.setMessage("Loading...");        PaymentConfiguration.init(                getApplicationContext(),                "pk_test_51IhI2UF42s0n1yNehlBsKQ2wjR1nTPKWOK5fUfAWBVa2E7Q8IYfsx3eWtWRlOddFjPpE5sHN1XnwtPTnLXnxHhCd00kFNc6WlK"        );//        etCardNo=findViewById(R.id.etCardNo);//        etCardMonth = findViewById(R.id.etCardMonth);//        etCardYear = findViewById(R.id.etCardYear);//        etCardCSV = findViewById(R.id.etCSV);    }//    private void paymentDetail() {////        PaymentDetailModel paymentDetailModel = new PaymentDetailModel();//        //Adding values//////      paymentDetailModel.setPaymentUid(UUID.randomUUID().toString());//        paymentDetailModel.setCardNo(etCardNo);//        paymentDetailModel.setCardCSVNo(etCardCSV);//        paymentDetailModel.setCardExpireDate(etCardMonth + "/" + etCardYear);//        paymentDetailModel.setPaymentPrice(etPayment.getText().toString());//        paymentDetailModel.setUserId(AppData.userId);//        paymentDetailModel.setCreate_date(java.text.DateFormat.getDateTimeInstance().format(new Date()));//////        DatabaseReference newRef = mRef.child("PaymentDetail").push();//        newRef.setValue(paymentDetailModel).addOnCompleteListener(new OnCompleteListener<Void>() {//            @Override//            public void onComplete(@NonNull Task<Void> task) {//                if (task.isSuccessful()) {//                    Intent intent = getIntent();//                    final String BuildingName = intent.getStringExtra("BuildingName");//                    final int slotNo = intent.getIntExtra("slotNo", 0);//                    final String startTime = intent.getStringExtra("startTime");//                    final String endTime = intent.getStringExtra("endTime");//                    reservedSlot(slotNo, startTime, endTime, BuildingName);//                    Toast.makeText(PaymentDetails.this, "Transaction Successfully done", Toast.LENGTH_SHORT).show();////                    Toast.makeText(PaymentDetails.this, "Payment  successfully", Toast.LENGTH_SHORT).show();//                } else {//                    Toast.makeText(PaymentDetails.this, "Failed some went wrong", Toast.LENGTH_SHORT).show();////                }//            }//        });////    }//    void refundPayment() {//        RequestQueue requestQueue = Volley.newRequestQueue(this);//        StringRequest request = new StringRequest(Request.Method.POST, "https://api.stripe.com/v1/charges/" + id + "/refunds", new Response.Listener<String>() {//            @Override//            public void onResponse(String response) {////                Log.d("resp", response);//////                try {////                    JSONObject jsonObject = new JSONObject(response);//                    if (jsonObject.getString("status").equals("succeeded")) {//                        Toast.makeText(PaymentDetails.this, "Transaction Successfully  Refunded done", Toast.LENGTH_SHORT).show();////                    } else {//////                    }//                } catch (JSONException e) {//                    e.printStackTrace();//                }////            }//        }, new Response.ErrorListener() {//            @Override//            public void onErrorResponse(VolleyError error) {////                progressBar.setVisibility(View.GONE);//                String abc = error.toString();//                Toast.makeText(PaymentDetails.this, "Some thing went Wrong", Toast.LENGTH_SHORT).show();////                Log.d("abc", abc);////            }//        }) {//            @Override//            public Map<String, String> getHeaders() throws AuthFailureError {//                Map<String, String> params = new HashMap<String, String>();//                params.put("Content-Type", "application/x-www-form-urlencoded");//                params.put("Authorization", "Bearer sk_test_oS5M9YaU3nPYhOaBmjcOpmIj00p8GSz9Al");//                return params;//            }//        };//////        request.setShouldCache(false);//        requestQueue.add(request);//////    }    void requestSections(String tokenID) {        int payAmount = Integer.parseInt(getIntent().getStringExtra("amount")) * 100;        OkHttpClient okHttpClient = new OkHttpClient.Builder()                .connectTimeout(60, TimeUnit.SECONDS)                .writeTimeout(60, TimeUnit.SECONDS)                .readTimeout(60, TimeUnit.SECONDS)                .build();        Retrofit retrofit = new retrofit2.Retrofit.Builder()                .baseUrl("https://api.stripe.com/")                .client(okHttpClient)                .addConverterFactory(GsonConverterFactory.create())                .build();        Api service = retrofit.create(Api.class);        Call<Example> call = service.addPayment(String.valueOf(payAmount), "usd", "testing ", tokenID);        call.enqueue(new Callback<Example>() {            @Override            public void onResponse(Call<Example> call, retrofit2.Response<Example> response) {                if (response.isSuccessful()) {                    Log.d("response", response.body().toString());                    Example example = response.body();                    progressDialog.hide();                    onButtonShowPopupWindowClick(example.getReceiptUrl());                    if (getIntent().getStringExtra("status").equals("group")) {                        updateRemainAmount(remain);                    }//                    try {//                    JSONObject jsonObject = new JSONObject(new Gson().toJson(response.body()));//                    if (jsonObject.getString("status").equals("succeeded")) {//                        onButtonShowPopupWindowClick(jsonObject.getString("receipt_url"));//                        id = jsonObject.getString("id");//                        Toast.makeText(PaymentDetails.this, "Transaction Successfully done", Toast.LENGTH_SHORT).show();//////                    }//                } catch (JSONException e) {//                    e.printStackTrace();//                }                }            }            @Override            public void onFailure(Call<Example> call, Throwable t) {            }        });//        RequestQueue requestQueue = Volley.newRequestQueue(this);//        StringRequest request = new StringRequest(Request.Method.POST, "https://api.stripe.com/v1/charges", new Response.Listener<String>() {//            @Override//            public void onResponse(String response) {////                Log.d("resp", response);//                    try {//                    JSONObject jsonObject = new JSONObject(response);//                    if (jsonObject.getString("status").equals("succeeded")) {//                        onButtonShowPopupWindowClick(jsonObject.getString("receipt_url"));//                        id = jsonObject.getString("id");////                        Toast.makeText(PaymentDetails.this, "Transaction Successfully done", Toast.LENGTH_SHORT).show();//////                    }////                } catch (JSONException e) {//                    e.printStackTrace();//                }////            }//        }, new Response.ErrorListener() {//            @Override//            public void onErrorResponse(VolleyError error) {////                progressBar.setVisibility(View.GONE);//                String abc = error.toString();//                Toast.makeText(PaymentDetails.this, "Some thing went Wrong", Toast.LENGTH_SHORT).show();//                Log.d("abc", abc);////            }//        }) {//            @Override//            public Map<String, String> getParams() throws AuthFailureError {//                Map<String, String> params = new HashMap<String, String>();//                params.put("amount", etPayment.getText().toString());//                params.put("currency", "usd");//                params.put("source", tokenID);//                params.put("description",//                        "My First Test Charge (created for API docs)"//                );//////                params.put("Content-Type","application/x-www-form-urlencoded");//                return params;//            }////            @Override//            public Map<String, String> getHeaders() throws AuthFailureError {//                Map<String, String> params = new HashMap<String, String>();//                params.put("Content-Type", "application/x-www-form-urlencoded");//                params.put("Authorization", "Bearer sk_test_51IhI2UF42s0n1yNeH6yVhekUTzV5CvHyt4HJaqBKOnGn1avQ59V6pKtQROOkJyEozi3SBio8LJWem71gY0PCMvFz00Bbh9V2Kt");//                return params;//            }//        };//        request.setShouldCache(false);//        requestQueue.add(request);  }    private void updateRemainAmount(String remain) {        FirebaseDatabase.getInstance().getReference().child("Group").child(getIntent().getStringExtra("groupUid")).child("total").setValue(remain).addOnSuccessListener(new OnSuccessListener<Void>() {            @Override            public void onSuccess(Void aVoid) {//                Toast.makeText(this, "amount add Successfully", Toast.LENGTH_SHORT).show();            }        }).addOnFailureListener(new OnFailureListener() {            @Override            public void onFailure(@NonNull Exception e) {//                Toast.makeText(AddMember.this, e.getMessage(), Toast.LENGTH_SHORT).show();            }        });    }    public void onButtonShowPopupWindowClick(String image_url) {//        // inflate the layout of the popup window        LayoutInflater inflater = (LayoutInflater)                getSystemService(LAYOUT_INFLATER_SERVICE);        View popupView = inflater.inflate(R.layout.popup_reciption, null);        // create the popup window        int width = LinearLayout.LayoutParams.MATCH_PARENT;        int height = LinearLayout.LayoutParams.MATCH_PARENT;        boolean focusable = true; // lets taps outside the popup also dismiss it        final PopupWindow popupWindow = new PopupWindow(popupView, width, height, focusable);        WebView imgReception = popupView.findViewById(R.id.img_reciption);        ImageView img_cross = popupView.findViewById(R.id.img_cross);        // show the popup window        // which view you pass in doesn't matter, it is only used for the window tolken        popupWindow.showAtLocation(popupView, Gravity.CENTER, 0, 0);//        Picasso.get().load(image_url).memoryPolicy(MemoryPolicy.NO_CACHE).into(imgReception);        imgReception.getSettings().setLoadsImagesAutomatically(true);        imgReception.getSettings().setJavaScriptEnabled(true);        imgReception.setScrollBarStyle(View.SCROLLBARS_INSIDE_OVERLAY);        imgReception.loadUrl(image_url);        img_cross.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                popupWindow.dismiss();                finish();            }        });        // dismiss the popup window when touched        popupView.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                popupWindow.dismiss();                return true;            }        });    }}